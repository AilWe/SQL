USE AdventureWorks2019
GO
--1.      How many products can you find in the Production.Product table?
--
SELECT COUNT(*) AS NumOfProduct
FROM Production.Product

--2.      Write a query that retrieves the number of products in the Production.Product table that are included in a subcategory. The rows that have NULL in column ProductSubcategoryID are considered to not be a part of any subcategory.
--
SELECT COUNT(*) AS NumOfProduct
FROM Production.Product
WHERE ProductSubcategoryID IS NOT NULL

--3.      How many Products reside in each SubCategory? Write a query to display the results with the following titles.
--
--ProductSubcategoryID CountedProducts
--
---------------------- ---------------
--
SELECT ProductSubcategoryID, COUNT(ProductSubcategoryID) AS CountedProducts
FROM Production.Product
WHERE ProductSubcategoryID IS NOT NULL
GROUP BY ProductSubcategoryID

--4.      How many products that do not have a product subcategory.
SELECT COUNT(*) AS NumOfProduct
FROM Production.Product
WHERE ProductSubcategoryID IS NULL
--
--5.      Write a query to list the sum of products quantity in the Production.ProductInventory table.
SELECT SUM(Quantity) AS NumOfQuantities
FROM Production.ProductInventory
--
--6.    Write a query to list the sum of products in the Production.ProductInventory table and LocationID set to 40 and limit the result to include just summarized quantities less than 100.
--
--              ProductID    TheSum
--
--              -----------        ----------
--
SELECT SUM(Quantity) AS NumOfQuantities
FROM Production.ProductInventory
WHERE LocationID = 40 AND Quantity < 100

--7.    Write a query to list the sum of products with the shelf information in the Production.ProductInventory table and LocationID set to 40 and limit the result to include just summarized quantities less than 100
--
--    Shelf      ProductID    TheSum
--
--    ----------   -----------        -----------
--
SELECT Shelf, ProductID, SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40 AND Quantity < 100
GROUP BY Shelf, ProductID
--8. Write the query to list the average quantity for products where column LocationID has the value of 10 from the table Production.ProductInventory table.
--
SELECT AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
WHERE LocationID = 10
--9.    Write query  to see the average quantity  of  products by shelf  from the table Production.ProductInventory
--
--    ProductID   Shelf      TheAvg
--
--    ----------- ---------- -----------
--
SELECT ProductID, Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
GROUP BY Shelf, ProductID
--10.  Write query  to see the average quantity  of  products by shelf excluding rows that has the value of N/A in the column Shelf from the table Production.ProductInventory
--
--    ProductID   Shelf      TheAvg
--
--    ----------- ---------- -----------
--
SELECT ProductID, Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory
WHERE Shelf != 'N/A'
GROUP BY Shelf, ProductID
--11.  List the members (rows) and average list price in the Production.Product table. This should be grouped independently over the Color and the Class column. Exclude the rows where Color or Class are null.
--
--    Color                        Class              TheCount          AvgPrice
--
--    -------------- - -----    -----------            ---------------------
--
SELECT Color, Class, COUNT(ProductNumber) AS TheCount, AVG(ListPrice) AS AvgPrice
FROM Production.Product
WHERE Color IS NOT NULL AND Class IS NOT NULL
GROUP BY Color, Class 
--Joins:
--
--12.   Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables. Join them and produce a result set similar to the following.
--
--    Country                        Province
--
--    ---------                          ----------------------
SELECT c.Name AS Country, s.Name AS Province
FROM Person.CountryRegion c INNER JOIN Person.StateProvince s ON c.CountryRegionCode = s.CountryRegionCode 
--
--13.  Write a query that lists the country and province names from person. CountryRegion and person. StateProvince tables and list the countries filter them by Germany and Canada. Join them and produce a result set similar to the following.
--
-- 
--
--    Country                        Province
--
--    ---------                          ----------------------
--
SELECT c.Name AS Country, s.Name AS Province
FROM Person.CountryRegion c INNER JOIN Person.StateProvince s ON c.CountryRegionCode = s.CountryRegionCode 
WHERE c.Name IN ('Germany', 'Canada')

-- Using Northwnd Database: (Use aliases for all the Joins)
--
USE Northwind
GO
--14.  List all Products that has been sold at least once in last 25 years.
--
SELECT *
FROM Products p INNER JOIN [Order Details] od ON p.ProductID = od.ProductID INNER JOIN Orders o ON od.OrderID = o.OrderID 
WHERE o.ShippedDate >= '1997-02-02'
--15.  List top 5 locations (Zip Code) where the products sold most.
--
SELECT TOP 5 ShipPostalCode
FROM Orders
GROUP BY ShipPostalCode
ORDER BY COUNT(ShipPostalCode) DESC

--16.  List top 5 locations (Zip Code) where the products sold most in last 25 years.
--
SELECT TOP 5 ShipPostalCode
FROM Orders
WHERE ShippedDate >= '1997-02-02'
GROUP BY ShipPostalCode
ORDER BY COUNT(ShipPostalCode) DESC
--17.   List all city names and number of customers in that city.     
--
SELECT City, count(ContactName) AS NumOfCustomer
FROM Customers
GROUP BY City
--18.  List city names which have more than 2 customers, and number of customers in that city
--
SELECT City, count(ContactName) AS NumOfCustomer
FROM Customers
GROUP BY City
HAVING Count(ContactName) > 10
--19.  List the names of customers who placed orders after 1/1/98 with order date.
--
SELECT DISTINCT c.ContactName
FROM Orders o INNER JOIN Customers c on o.CustomerID = c.CustomerID
where OrderDate > '1998-01-01'
--20.  List the names of all customers with most recent order dates
--
SELECT CustomerID, OrderDate FROM (SELECT DISTINCT CustomerID, OrderDate ,dense_rank() over (partition by CustomerID ORDER BY orderDate desc) rnk FROM Orders) dt
WHERE dt.rnk = 1
--21.  Display the names of all customers  along with the  count of products they bought
--
select c.ContactName, count(c.ContactName) 
from Orders o inner join Customers c
on o.CustomerID = c.CustomerID
group by c.ContactName
order by count(c.ContactName) desc

--22.  Display the customer ids who bought more than 100 Products with count of products.
--
select c.ContactName, sum(r.Quantity) 
from Orders o inner join Customers c
on o.CustomerID = c.CustomerID
inner join [Order Details] r
on r.OrderID = o.OrderID
group by c.ContactName 
having sum(r.Quantity) > 100
order by sum(r.Quantity) desc
--23.  List all of the possible ways that suppliers can ship their products. Display the results as below
--
--    Supplier Company Name                Shipping Company Name
--
--    ---------------------------------            ----------------------------------
--
select u.CompanyName, s.CompanyName from Shippers s
cross join Suppliers u
--24.  Display the products order each day. Show Order date and Product Name.
--
select distinct r.OrderDate, p.ProductName 
from Products p inner join [Order Details] o 
on p.ProductID = o.ProductID
inner join Orders r
on r.OrderID = o.OrderID

--25.  Displays pairs of employees who have the same job title.
--
select * from Employees e inner join Employees m 
on e.Title = m.Title
--26.  Display all the Managers who have more than 2 employees reporting to them.
--
select e.EmployeeID, e.LastName, e.FirstName, e.Title from Employees e inner join
Employees m
on e.EmployeeID = m.ReportsTo
where e.Title like '%manager%'
group by e.EmployeeID, e.LastName, e.FirstName, e.Title 
having count(m.ReportsTo) > 2
--27.  Display the customers and suppliers by city. The results should have the following columns
--
--City
--
--Name
--
--Contact Name,
--
--Type (Customer or Supplier)
select city, ContactName, 'Customer' as Type from Customers
union
select city, ContactName, 'Supplier' as Type from Suppliers
