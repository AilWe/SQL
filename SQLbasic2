--JOIN: is used to combine rows from two or more tables, based on a related column between hem

--1. INNER JOIN: return the records taht have matching values in both tables
--find employees who have deal with any orders
SELECT e.EmployeeID, e.FirstName + ' ' +e.LastName EmployeeName, o.OrderDate
FROM Employees e INNER JOIN Orders o ON e.EmployeeID = o.EmployeeID

SELECT e.EmployeeID, e.FirstName + ' ' +e.LastName EmployeeName, o.OrderDate
FROM Employees e JOIN Orders o ON e.EmployeeID = o.EmployeeID

--another way to implement inner join
SELECT e.EmployeeID, e.FirstName + ' ' +e.LastName EmployeeName, o.OrderDate
FROM Employees e, Orders o
WHERE e.EmployeeID = o.EmployeeID

--get cusotmers information and corresponding order date
SELECT c.ContactName, c.City, c.Country, o.OrderDate
FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID
ORDER BY c.ContactName

--join multiple tables:
--get customer name, the corresponding employee who is responsible for this order, and the order date
SELECT c.ContactName, e.FirstName + ' ' + e.LastName EmployeeName, o.OrderDate
FROM Customers c INNER JOIN Orders o ON c.CustomerID = o.CustomerID INNER JOIN Employees e ON e.EmployeeID = o.EmployeeID

--add detailed information about quantity and price, join Order details
SELECT c.ContactName, e.FirstName + ' ' + e.LastName EmployeeName, o.OrderDate, od.Quantity, od.UnitPrice
FROM Customers c INNER JOIN Orders o ON c.CustomerID = o.CustomerID INNER JOIN Employees e ON e.EmployeeID = o.EmployeeID INNER JOIN [Order Details] od ON od.OrderID = o.OrderID


--2. OUTER JOIN
--1) LEFT OUTER JOIN: will return all the records from the left table, and the matched records from the right table, for the non matching records in the right table, return null value
--list all customers whether they have made any purchase or not
SELECT c.ContactName, o.OrderID
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
ORDER BY o.OrderID

SELECT c.ContactName, o.OrderID
FROM Customers c INNER JOIN Orders o ON c.CustomerID = o.CustomerID
ORDER BY o.OrderID

--JOIN with WHERE: find out customers who have never placed any order
SELECT c.ContactName, o.OrderID
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderId is null

--2) RIGHT OUTER JOIN: return all records from the right table, and matching records from the left tables. no matching values --> return null
SELECT c.ContactName, o.OrderID
FROM Orders o Right JOIN Customers c ON c.CustomerID = o.CustomerID


--3) FULL OUTER JOIN: return all rows from the left table and right table, if the join condition is not met, it will return null values
--Match all customers and suppliers by country.
SELECT c.ContactName, c.Country AS CustomerCountry, s.Country as SupplierCountry, s.CompanyName
FROM Customers c FULL JOIN Suppliers s ON c.Country = s.Country
ORDER BY c.Country, s.Country


--3. CROSS JOIN: create the cartesian product of two tables
--table1: 10 rows, table2: 20 rows; cross join --> 200 rows will be returned
SELECT COUNT(*)
FROM Customers

SELECT COUNT(*)
FROM Orders

SELECT COUNT(*)
FROM Customers CROSS JOIN Orders


--* SELF JOINï¼š join the table with itself, either inner join or outer join
SELECT EmployeeID, FirstName, LastName, ReportsTo
FROM Employees

--CEO: Andrew
--Manager: Nancy, Janet, Margaret, Steven, Laura
--Employee: Michael, Robert, Anne

--find emloyees with the their manager name
SELECT e.FirstName + ' ' + e.LastName as Employee, m.FirstName + ' '+ m.LastName as Manager
FROM Employees e INNER JOIN Employees m ON e.ReportsTO = m.EmployeeID

--if we want to include Andrew
SELECT e.FirstName + ' ' + e.LastName as Employee, ISNull(m.FirstName + ' '+ m.LastName, 'N/A')  as Manager
FROM Employees e LEFT JOIN Employees m ON e.ReportsTO = m.EmployeeID

--Aggregation functions: perform a calculation on a set of values and returns a single value
--1. COUNT(): returns the number of rows
SELECT COUNT(OrderID) AS TotalNumOfOrders
FROM Orders

SELECT COUNT(*) AS TotalNumOfOrders
FROM Orders

SELECT COUNT(12) AS TotalNumOfOrders
FROM Orders


--COUNT(*) vs. COUNT(colName):
--Count(*) will include null value, COUNT(colName) will not
SELECT *
FROM Employees

SELECT COUNT(*), COUNT(Region)
FROM Employees

--use w/ GROUP BY: groups rows that have same values into summary rows
--use group by when we have both aggregated fileds and non-aggregated fileds in SELECT, inlucde all non-aggregated fileds in GROUP BY clause
--find total number of orders placed by each customers
SELECT c.ContactName, c.Country, COUNT(o.OrderID) AS NumOfOrders
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.ContactName, c.Country
ORDER BY NumOfOrders DESC



--a more complex template: 
--only retreive total order numbers where customers located in USA or Canada, and order number should be greater than or equal to 10
SELECT c.ContactName, c.Country, COUNT(o.OrderID) AS NumOfOrders
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE c.Country IN ('USA', 'Canada')
GROUP BY c.ContactName, c.Country
HAVING COUNT(o.OrderID) >= 10
ORDER BY NumOfOrders DESC

--SELECT fields, aggregate(fields)
--FROM table JOIN table2..
--WHERE criteria --optional
--GROUP BY fields 
--HAVING criteria --optional
--ORDER BY field --optional

--WHERE vs. HAVING
--1) both are used as filters. HAVING applies only to groups as a whole, and only filters on aggregated fields, but WHERE applies to individual rows
--2) WHERE goes before aggregations but HAVING filters after the aggregations
	--FROM and JOIN -> WHERE -> GROUP BY -> HAVING -> SELECT -> DISTINCT -> ORDER BY
						--alis in SELECT not valid--
SELECT c.ContactName, c.Country AS Cty, COUNT(o.OrderID) AS NumOfOrders
FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE Cty IN ('USA', 'Canada')
GROUP BY c.ContactName, Cty
HAVING NumOfOrders >= 10
ORDER BY NumOfOrders DESC
--3) WHERE can be used with SELECT, UPDATE and DELETE statements, but HAVING can only be used in SELECT statement

--UPATE WITH WHERE
SELECT *
FROM Products

UPDATE Products
SET UnitPrice = 18
WHERE ProductID = 1

--COUNT DISTINCT: only count unique values
SELECT City
FROM Customers

SELECT COUNT(DISTINCT City)
FROM Customers


--2. AVG(): return average value of a numeric column
--list average revenue for each customer
SELECT c.ContactName, AVG(od.Quantity*od.UnitPrice) AS AvgRevenue
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY AvgRevenue DESC

--3. SUM(): return the total sum of a numeric column
--list sum of revenue for each customer
SELECT c.ContactName, SUM(od.Quantity*od.UnitPrice) AS SumRevenue
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY SumRevenue DESC

--4. MAX(): return the largest value of the selected column
--list maxinum revenue from each customer
SELECT c.ContactName, MAX(od.Quantity*od.UnitPrice) AS MaxRevenue
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY MaxRevenue DESC

--5.MIN(): return the smallest value
--list the cheapeast product bought by each customer
SELECT c.ContactName, MIN(od.UnitPrice) AS CheapestProduct
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY CheapestProduct DESC

--TOP predicate: select a spefic number or a certain percentage of records from data
--retrieve top 5 most expensive products
SELECT ProductName, UnitPrice
FROM Products
ORDER BY UnitPrice DESC

SELECT TOP 5 ProductName, UnitPrice
FROM Products
ORDER BY UnitPrice DESC

SELECT ProductName, UnitPrice
FROM Products

SELECT TOP 5 ProductName, UnitPrice
FROM Products

--retrieve top 10 percent most expensive products
SELECT TOP 10 PERCENT ProductName, UnitPrice
FROM Products
ORDER BY UnitPrice DESC


--list top 5 customers who created the most total revenue
SELECT TOP 5 c.ContactName, SUM(od.Quantity*od.UnitPrice) AS SumRevenue
FROM [Order Details] od JOIN Orders o ON od.OrderID = o.OrderID JOIN Customers c ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY SumRevenue DESC


--Subquery: a SELECT statement that is embedded in a clause of another SQL statement
SELECT ContactName, City 
FROM Customers
ORDER BY ContactName

--find the customers from the same city wehre Alejandra Camino lives 
SELECT ContactName, City
FROM Customers 
WHERE City IN (
SELECT City
FROM Customers
WHERE ContactName = 'Alejandra Camino'
)

SELECT ContactName, City
FROM Customers 
WHERE City IN (
SELECT City
FROM Customers
WHERE ContactName = 'Alejandra Camino'
) AND ContactName != 'Alejandra Camino'


--find customers who made any orders
--JOIN
SELECT DISTINCT c.CustomerId, c.ContactName, c.City, c.Country
FROM Customers c INNER JOIN Orders o ON c.CustomerID = o.CustomerId

--subquery
SELECT CustomerID, ContactName, City, Country
FROM Customers
WHERE CustomerID IN (
SELECT DISTINCT CustomerID FROM Orders
)


--subquery vs. join
--1. JOIN can only be used in FROM clause, but subquery can be used in SELECT, WHERE, HAVING or FROM clause
--list all the order data and the corresponding employee whose in charge of this order
--JOIN
SELECT o.OrderDate, E.FirstName, e.LastName
FROM Orders o INNER JOIN Employees e ON o.EmployeeID = e.EmployeeID
WHERE e.City = 'London'
ORDER BY o.OrderDate, E.FirstName, e.LastName

--Subquery
SELECT o.OrderDate,
(SELECT FirstName FROM Employees e1 WHERE o.EmployeeID = e1.EmployeeID),
(SELECT LastName FROM Employees e2 WHERE o.EmployeeID = E2.EmployeeID)
FROM Orders o
WHERE (SELECT e3.City FROM Employees e3 WHERE o.EmployeeID = e3.EmployeeID) = 'London'
ORDER BY o.OrderDate,
(SELECT FirstName FROM Employees e1 WHERE o.EmployeeID = e1.EmployeeID),
(SELECT LastName FROM Employees e2 WHERE o.EmployeeID = E2.EmployeeID)
--2)subquery is easy to understand and maintain
--find customers who never placed any order
--join
SELECT c.CustomerID, c.ContactName, c.City, c.Country
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID is null

--subquery
SELECT CustomerID, ContactName, City, Country
FROM Customers
WHERE CustomerID NOT IN (
SELECT DISTINCT CustomerID FROM Orders
)

--3) join will have a better performance than subquery
--sql server has an optimizer for joins, not for subqueries

--Correlated Subquery: where inner query is dependent on the outer query
--Customer name and total number of orders by customer
--join
SELECT c.ContactName, COUNT(o.OrderID) NumOfOrders
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName
ORDER BY NumOfOrders DESC

--corrlated subqury
SELECT c.ContactName,
(SELECT COUNT(o.OrderID) FROM Orders o WHERE c.CustomerID = o.CustomerID) NumOfOrders
FROM Customers c
ORDER BY NumOfOrders DESC

--derived table: used in FROM clause
SELECT CustomerID, ContactName
FROM (
SELECT * FROM Customers
) dt

--customers and the number of orders they made
SELECT c.ContactName, c.CompanyName, c.City, c.Country, COUNT(o.OrderID) NumOfOrders
FROM Customers c LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName, c.CompanyName, c.City, c.Country
ORDER BY NumOfOrders DESC

SELECT c.ContactName, c.CompanyName, c.City, c.Country, dt.NumOfOrders
FROM Customers c LEFT JOIN (
SELECT CustomerID, COUNT(OrderID)NumOfOrders  
FROM Orders 
GROUP BY CustomerID
) dt ON c.CustomerID = dt.CustomerID
ORDER BY dt.NumOfOrders DESC
